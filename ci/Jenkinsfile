#!/usr/bin/env groovy

@Library('imperative-when')

def err = null

node {
    // Creamos el try catch para obtener el error si sucede
    try{
        stage('Checkout') {
        scmVars = checkout([
            $class: 'GitSCM', 
            branches: [[name: 'main']], 
            extensions: [], 
            userRemoteConfigs: [[
                credentialsId: 'git-credentials', 
                url: 'https://github.com/sebastian2296/devops-project.git'
            ]]
        ])
        }

    dir('iac/terraform/networking'){
        stage('terraform init'){
        withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: "AWS-terraform",
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {      
            sh "terraform init -reconfigure -backend-config=backend.conf"
                }
            }
    
        stage('Terraform Validate') {
        sh "terraform fmt"
        sh "terraform validate"
            }

        stage('terraform plan') {
        withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: "AWS-terraform",
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]){
        sh """terraform plan -var \"owner=Sebastian\" -out=tfplan"""
        }
            }
        stage('Terraform apply') {
            withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: "AWS-terraform",
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        // Se efecuta el plan si la rama es main
        when(scmVars.GIT_BRANCH == 'origin/main') {
            sh "terraform apply -auto-approve tfplan"
        }
        }
            }

        stage('Terraform destroy') {
            withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: "AWS-terraform",
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        // Se efecuta el plan si la rama es main
        when(scmVars.GIT_BRANCH == 'origin/main') {
            sh "terraform destroy -auto-approve tfplan"
        }
        }
            }
        }
    } catch(caughtError) {
        err = caughtError
        currentBuild.result = 'FAILURE'
    } finally {
        stage('Clean') {
            cleanWs()
        }
        if(err) {
            throw err
        }
    }
}
